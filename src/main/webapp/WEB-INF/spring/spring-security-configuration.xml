<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security" xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <!-- Creates a one-way hash of the password, which we store instead of storing the password -->
    <beans:bean id="application.passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />

    <!-- The salt used when creating the hash of the password -->
    <beans:bean id="application.saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
        <!-- Use the entityId as the salt since it will always be available and never change -->
        <beans:property name="userPropertyToUse" value="salt" />
    </beans:bean>

    <!-- Our Registrar application UserDetailsService implementation -->
    <beans:bean id="application.userDetailsService" class="com.mops.registrar.security.RegistrarUserDetailsService" />

    <!-- Specify we want to use this authentication provider, and it use all our specific implementations -->
    <beans:bean id="application.authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <beans:property name="passwordEncoder" ref="application.passwordEncoder" />
        <beans:property name="saltSource" ref="application.saltSource" />
        <beans:property name="userDetailsService" ref="application.userDetailsService" />
    </beans:bean>

    <!-- Spring Security tag which enables HTTP (web) based security -->
    <!-- Here we're specifying our AuthenticationManager and also that we're using expressions -->
    <!-- (warnings here are because the Spring Security namespace uses deprecated APIs) -->
    <!-- (see: https://jira.springsource.org/browse/SEC-1909 for more details) -->
    <http authentication-manager-ref="application.authenticationManager" use-expressions="true">
        <!-- Any URL with "/admin/" in the path is restricted to ROLE_ADMIN_USER -->
        <intercept-url pattern="/**/admin/**" access="hasRole('ROLE_ADMIN_USER')" />
        <!-- Any URL with "/user/profile" in the path is restricted to registered users -->
        <intercept-url pattern="/**/user/profile**" access="hasRole('ROLE_REGISTERED_USER')" />
        <!-- Any URL (not matched by the above patterns) is restricted to admins, registered users, and anonymous (anyone) -->
        <intercept-url pattern="/**" access="hasAnyRole('ROLE_ADMIN_USER','ROLE_REGISTERED_USER','ROLE_ANONYMOUS')" />
        <!-- Enables form based login -->
        <form-login default-target-url="/page/home" login-page="/page/login" authentication-failure-url="/page/login?error"/>
        <!-- Enables the logout function -->
        <logout logout-success-url="/page/home"/>
    </http>

    <!-- Establishes an AuthenticationManager which uses our AuthenticationProvider -->
    <authentication-manager id="application.authenticationManager">
        <authentication-provider ref="application.authenticationProvider" />
    </authentication-manager>
</beans:beans>